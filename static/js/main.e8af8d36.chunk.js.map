{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/images/mukesh.jpg"],"names":["App","state","repoLoad","repos","this","fetchRepos","axios","get","data","setState","className","height","src","me","style","fontSize","href","marginTop","maxWidth","display","width","role","map","repo","html_url","name","description","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yRAoDeA,E,4MA9CbC,MAAQ,CACNC,UAAU,EACVC,MAAO,I,kEAKPC,KAAKC,e,mKAGYC,IAAMC,IAAI,mD,OAAvBC,E,OACJJ,KAAKK,SAAS,CAACN,MAAMK,EAAKA,KAAKN,UAAS,I,qIAGxC,OACE,oCACE,yBAAKQ,UAAU,kBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBAAiBC,OAAO,MAAMC,IAAKC,MAClD,wBAAIH,UAAU,cAAd,iBACA,uBAAGA,UAAU,4BAA4BI,MAAO,CAACC,SAAS,KAA1D,2BAEF,uBAAGL,UAAU,2BAA2BM,KAAK,kBAA7C,YAEF,yBAAKN,UAAU,mBACb,kBAAC,IAAD,CAASA,UAAU,GAAGI,MAAO,CAACG,WAAW,GAAGC,SAAS,IAAIC,QAAQ,eAAeC,MAAM,SACpF,kBAAC,IAAD,KACE,wBAAIV,UAAU,qBAAd,WACA,yBAAKA,UAAU,yBACb,yBAAKA,UAAW,eAAgBN,KAAKH,MAAMC,SAAmB,GAAV,YAClD,yBAAKQ,UAAU,8BAA8BW,KAAK,UAChD,0BAAMX,UAAU,WAAhB,gBAIFN,KAAKH,MAAME,MAAMmB,KAAI,SAACC,GAAD,OAAU,oCAAE,4BAAI,uBAAGP,KAAMO,EAAKC,UAAWD,EAAKE,OAAc,2BAAIF,EAAKG,aAAgB,0C,GApC1GC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.e8af8d36.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport me from './assets/images/mukesh.jpg';\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBProgress } from 'mdbreact';\r\nimport axios from 'axios';\r\nclass App extends React.Component {\r\n  state = {\r\n    repoLoad: true,\r\n    repos: [\r\n\r\n    ]\r\n  }\r\n  componentDidMount() {\r\n    this.fetchRepos()\r\n  }\r\n  async fetchRepos() {\r\n    var data = await axios.get(\"https://api.github.com/users/MukeshKalaga/repos\")\r\n    this.setState({repos:data.data,repoLoad:false})\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"main-container\">\r\n          <div className=\"text-center\">\r\n            <img className=\"rounded-circle\" height=\"200\" src={me} />\r\n            <h2 className=\"title-name\">Mukesh Kalaga</h2>\r\n            <p className=\"text-white text-uppercase\" style={{fontSize:14}}> - Fullstack Developer</p>\r\n          </div>\r\n          <a className=\"hire-me-btn rounded-pill\" href=\"tel:7661959689\">Hire Me</a>\r\n        </div>\r\n        <div className=\"p-3 text-center\">\r\n          <MDBCard className=\"\" style={{marginTop:-40,maxWidth:700,display:\"inline-block\",width:\"100%\"}}>\r\n            <MDBCardBody>\r\n              <h4 className=\"recent-work-title\">My Work</h4>\r\n              <div className='recent-work-container'>\r\n                <div className={'text-center'+(!this.state.repoLoad?\" d-none\":\"\")}>\r\n                  <div className=\"spinner-border text-primary\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                </div>\r\n                {\r\n                  this.state.repos.map((repo) => <><h2><a href={repo.html_url}>{repo.name}</a></h2><p>{repo.description}</p><hr/></>)\r\n                }\r\n              </div>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/mukesh.f05e8d56.jpg\";"],"sourceRoot":""}